#!/usr/bin/env python

import os

Import("env")
Import("env_modules")

env_audio = env_modules.Clone()

thirdparty_obj = []

thirdparty_dir = "#thirdparty/"
thirdparty_sources = []
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_audio.Prepend(CPPPATH=[thirdparty_dir + "miniaudio"])

if env["audio_support_mp3"] or env["audio_support_flac"] or env["audio_support_wav"]:
    env_audio.Prepend(CPPPATH=[thirdparty_dir + "dr_libs"])

if env["platform"] == "web":
    # Remove all -std=c* or -ansi flags
    env_audio["CCFLAGS"] = [flag for flag in env_audio["CCFLAGS"] if not flag.startswith("-std=")]
    env_audio["CCFLAGS"] = [flag for flag in env_audio["CCFLAGS"] if not flag.startswith("-ansi")]



env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj

module_obj = []

if env["audio_support_mp3"]:
    env_audio.Prepend(CPPDEFINES=["AUDIO_SUPPORT_MP3"])

if env["audio_support_flac"]:
    env_audio.Prepend(CPPDEFINES=["AUDIO_SUPPORT_FLAC"])

if env["audio_support_wav"]:
    env_audio.Prepend(CPPDEFINES=["AUDIO_SUPPORT_WAV"])
    env_audio.add_source_files(module_obj, "thirdparty/dr_wav.c")

env_audio.add_source_files(module_obj, "thirdparty/miniaudio.c")
env_audio.add_source_files(module_obj, "internal/*.c")
env_audio.add_source_files(module_obj, "*.c")
env.modules_sources += module_obj

env.Depends(module_obj, thirdparty_obj)
