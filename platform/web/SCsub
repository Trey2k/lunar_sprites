#!/usr/bin/env python

Import("env")

# The HTTP server "targets". Run with "scons p=web serve", or "scons p=web run"
if "serve" in COMMAND_LINE_TARGETS or "run" in COMMAND_LINE_TARGETS:
    from serve import serve
    import os

    port = os.environ.get("LUNAR_WEB_TEST_PORT", 8060)
    try:
        port = int(port)
    except Exception:
        print("LUNAR_WEB_TEST_PORT must be a valid integer")
        sys.exit(255)
    serve(env.Dir("#bin/.web_zip").abspath, port, "run" in COMMAND_LINE_TARGETS)
    sys.exit(0)

web_files = [
    "keymap.c",
    "window.c",
    "os.c",
    "js_methods.c",
    'main.c',
]

if env["use_opengl"]:
    web_files += ["webgl.c"]

sys_env = env.Clone()
sys_env.AddJSLibraries([])
sys_env.AddJSExterns([])

if env["javascript_eval"]:
    # TODO: implement this
    # sys_env.AddJSLibraries([])
    pass

for lib in sys_env["JS_LIBS"]:
    sys_env.Append(LINKFLAGS=["--js-library", lib.abspath])
for js in sys_env["JS_PRE"]:
    sys_env.Append(LINKFLAGS=["--pre-js", js.abspath])
for ext in sys_env["JS_EXTERNS"]:
    sys_env["ENV"]["EMCC_CLOSURE_ARGS"] += " --externs " + ext.abspath

build = []
build_targets = ["#bin/lunar_sprites${PROGSUFFIX}.js", "#bin/lunar_sprites${PROGSUFFIX}.wasm", "#bin/lunar_sprites${PROGSUFFIX}.worker.js"]

if env["dlink_enabled"]:
    # Reset libraries, The main runtime will only link emscripten libraries.
    sys_env["LIBS"] = []
    sys_env.Append(LIBS=["idbfs.js"])
    sys_env["CCFLAGS"].remove("SIDE_MODULE=2")
    sys_env["LINKFLAGS"].remove("SIDE_MODULE=2")
    sys_env.Append(CCFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "EXPORT_ALL=1"])
    sys_env.Append(LINKFLAGS=["-s", "WARN_ON_UNDEFINED_SYMBOLS=0"])

    sys_env["ENV"]["EMCC_FORCE_STDLIBS"] = "libc"
    sys_env["CCFLAGS"].remove("-Os")
    sys_env["CCFLAGS"].remove("-fvisibility=hidden")
    sys_env["LINKFLAGS"].remove("-fvisibility=hidden")

    sys = sys_env.Program(build_targets, ["web_runtime.c"])

    # The side module containing the runtime.
    wasm = env.add_program("#bin/lunar_sprites.side${PROGSUFFIX}.wasm", web_files)
    build = sys + [wasm[0]]
else:
    sys_env.Append(LIBS=["idbfs.js"])
    build = sys_env.Program(build_targets, web_files + ["web_runtime.c"])

sys_env.Depends(build[0], sys_env["JS_LIBS"])
sys_env.Depends(build[0], sys_env["JS_PRE"])
sys_env.Depends(build[0], sys_env["JS_EXTERNS"])

engine = [
    "js/engine/fs.js",
    "js/engine/engine.js",
]
externs = []
js_engine = env.CreateEngineFile("#bin/lunar_sprites${PROGSUFFIX}.engine.js", engine, externs)
env.Depends(js_engine, externs)

wrap_list = [
    build[0],
    js_engine,
]
js_wrapped = env.Textfile("#bin/lunar_sprites", [env.File(f) for f in wrap_list], TEXTFILESUFFIX="${PROGSUFFIX}.wrapped.js")

# 0 - unwrapped js file (use wrapped one instead)
# 1 - wasm file
# 2 - worker js file
# 3 - wasm side (when dlink_enabled is true)
env.CreateTemplateZip(js_wrapped, build[1], build[2], build[3] if len(build) > 3 else None)